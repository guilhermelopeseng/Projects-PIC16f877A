;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 09/12/2020 16:44:23
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0x2847      	GOTO       71
_interrupt:
0x0004	0x00FF      	MOVWF      R15
0x0005	0x0E03      	SWAPF      STATUS, 0
0x0006	0x0183      	CLRF       STATUS
0x0007	0x00A5      	MOVWF      ___saveSTATUS
0x0008	0x080A      	MOVF       PCLATH, 0
0x0009	0x00A4      	MOVWF      ___savePCLATH
0x000A	0x018A      	CLRF       PCLATH
;Timer0.c,12 :: 		void interrupt(){             // Rotina de interrupção
;Timer0.c,13 :: 		if(T0IF_bit)             // Flag para verificar se houve estouro
0x000B	0x1D0B      	BTFSS      T0IF_bit, BitPos(T0IF_bit+0)
0x000C	0x2813      	GOTO       L_interrupt0
;Timer0.c,15 :: 		contador++;          // Ficar incrementando
0x000D	0x0AA0      	INCF       _contador, 1
0x000E	0x1903      	BTFSC      STATUS, 2
0x000F	0x0AA1      	INCF       _contador+1, 1
;Timer0.c,17 :: 		TMR0 = 0x06;         // Retorno o TMR0 para o valor inicial que foi determinado
0x0010	0x3006      	MOVLW      6
0x0011	0x0081      	MOVWF      TMR0
;Timer0.c,18 :: 		T0IF_bit = 0x00;     // Zera a flag T0IF
0x0012	0x110B      	BCF        T0IF_bit, BitPos(T0IF_bit+0)
;Timer0.c,19 :: 		}
L_interrupt0:
;Timer0.c,20 :: 		}
L_end_interrupt:
L__interrupt6:
0x0013	0x0824      	MOVF       ___savePCLATH, 0
0x0014	0x008A      	MOVWF      PCLATH
0x0015	0x0E25      	SWAPF      ___saveSTATUS, 0
0x0016	0x0083      	MOVWF      STATUS
0x0017	0x0EFF      	SWAPF      R15, 1
0x0018	0x0E7F      	SWAPF      R15, 0
0x0019	0x0009      	RETFIE
; end of _interrupt
_____DoICP:
;__Lib_System.c,6 :: 		
;__Lib_System.c,9 :: 		
0x001A	0x1283      	BCF        STATUS, 5
0x001B	0x1303      	BCF        STATUS, 6
0x001C	0x0823      	MOVF       ___DoICPAddr+1, 0
0x001D	0x008A      	MOVWF      PCLATH
;__Lib_System.c,10 :: 		
0x001E	0x0822      	MOVF       ___DoICPAddr, 0
0x001F	0x0082      	MOVWF      PCL
;__Lib_System.c,12 :: 		
L_end_____DoICP:
0x0020	0x0008      	RETURN
; end of _____DoICP
___CC2DW:
;__Lib_System.c,134 :: 		
;__Lib_System.c,137 :: 		
_CC2D_Loop1:
;__Lib_System.c,139 :: 		
0x0021	0x201A      	CALL       _____DoICP
0x0022	0x118A      	BCF        PCLATH, 3
0x0023	0x120A      	BCF        PCLATH, 4
;__Lib_System.c,141 :: 		
0x0024	0x0080      	MOVWF      INDF
;__Lib_System.c,142 :: 		
0x0025	0x0A84      	INCF       FSR, 1
;__Lib_System.c,143 :: 		
0x0026	0x0AA2      	INCF       ___DoICPAddr, 1
;__Lib_System.c,145 :: 		
0x0027	0x1903      	BTFSC      STATUS, 2
;__Lib_System.c,146 :: 		
0x0028	0x0AA3      	INCF       ___DoICPAddr+1, 1
;__Lib_System.c,147 :: 		
0x0029	0x03F0      	DECF       R0, 1
;__Lib_System.c,149 :: 		
0x002A	0x1D03      	BTFSS      STATUS, 2
;__Lib_System.c,150 :: 		
0x002B	0x2821      	GOTO       _CC2D_Loop1
;__Lib_System.c,152 :: 		
L_end___CC2DW:
0x002C	0x0008      	RETURN
; end of ___CC2DW
_configTimer:
;Timer0.c,22 :: 		void configTimer(){
;Timer0.c,23 :: 		OPTION_REG = 0b10000011;         // Configuração do OPTION_REG. Verificar no datasheet
0x002D	0x3083      	MOVLW      131
0x002E	0x1683      	BSF        STATUS, 5
0x002F	0x1303      	BCF        STATUS, 6
0x0030	0x0081      	MOVWF      OPTION_REG
;Timer0.c,26 :: 		GIE_bit = 0x01;            // Habilitar a interupção global
0x0031	0x178B      	BSF        GIE_bit, BitPos(GIE_bit+0)
;Timer0.c,27 :: 		PEIE_bit = 0x01;           // Habilitar a interrupção por periféricos
0x0032	0x170B      	BSF        PEIE_bit, BitPos(PEIE_bit+0)
;Timer0.c,28 :: 		T0IE_bit = 0x01;           // Habilitar a interrupção estouro TMR0
0x0033	0x168B      	BSF        T0IE_bit, BitPos(T0IE_bit+0)
;Timer0.c,30 :: 		TMR0 = 0x06;               // Inicialização da contagem em 6
0x0034	0x3006      	MOVLW      6
0x0035	0x1283      	BCF        STATUS, 5
0x0036	0x0081      	MOVWF      TMR0
;Timer0.c,31 :: 		TRISB.RB7 = 0x00;          // Define RB7 como saída
0x0037	0x1683      	BSF        STATUS, 5
0x0038	0x1386      	BCF        TRISB, 7
;Timer0.c,32 :: 		RB7_bit = 0x00;            // Inicia RB7 em LOW
0x0039	0x1283      	BCF        STATUS, 5
0x003A	0x1386      	BCF        RB7_bit, BitPos(RB7_bit+0)
;Timer0.c,34 :: 		}
L_end_configTimer:
0x003B	0x0008      	RETURN
; end of _configTimer
_configPic:
;Timer0.c,5 :: 		void configPic(){
;Timer0.c,6 :: 		TRISA = 0xFF;
0x003C	0x30FF      	MOVLW      255
0x003D	0x1683      	BSF        STATUS, 5
0x003E	0x1303      	BCF        STATUS, 6
0x003F	0x0085      	MOVWF      TRISA
;Timer0.c,7 :: 		TRISB = 0b01111111;
0x0040	0x307F      	MOVLW      127
0x0041	0x0086      	MOVWF      TRISB
;Timer0.c,8 :: 		TRISC = 0xFF;
0x0042	0x30FF      	MOVLW      255
0x0043	0x0087      	MOVWF      TRISC
;Timer0.c,9 :: 		TRISD = 0xFF;
0x0044	0x30FF      	MOVLW      255
0x0045	0x0088      	MOVWF      TRISD
;Timer0.c,10 :: 		}
L_end_configPic:
0x0046	0x0008      	RETURN
; end of _configPic
_main:
0x0047	0x1283      	BCF        STATUS, 5
0x0048	0x1303      	BCF        STATUS, 6
0x0049	0x01A0      	CLRF       _contador
0x004A	0x01A1      	CLRF       33
;Timer0.c,36 :: 		void main() {
;Timer0.c,37 :: 		configPic();
0x004B	0x203C      	CALL       _configPic
;Timer0.c,38 :: 		configTimer();
0x004C	0x202D      	CALL       _configTimer
;Timer0.c,40 :: 		while(1){
L_main1:
;Timer0.c,41 :: 		if(contador == 1000)  {  // Cálculo = (256 - 6)*16*0,000001*1000 = 4 seg.
0x004D	0x0821      	MOVF       _contador+1, 0
0x004E	0x3A03      	XORLW      3
0x004F	0x1D03      	BTFSS      STATUS, 2
0x0050	0x2853      	GOTO       L__main9
0x0051	0x30E8      	MOVLW      232
0x0052	0x0620      	XORWF      _contador, 0
L__main9:
0x0053	0x1D03      	BTFSS      STATUS, 2
0x0054	0x2859      	GOTO       L_main3
;Timer0.c,43 :: 		RB7_bit = ~RB7_bit;     // Comutar o estado
0x0055	0x3080      	MOVLW      128
0x0056	0x0686      	XORWF      RB7_bit, 1
;Timer0.c,44 :: 		contador = 0x00;         // Zera a variável contador
0x0057	0x01A0      	CLRF       _contador
0x0058	0x01A1      	CLRF       _contador+1
;Timer0.c,45 :: 		}
L_main3:
;Timer0.c,46 :: 		}
0x0059	0x284D      	GOTO       L_main1
;Timer0.c,47 :: 		}
L_end_main:
0x005A	0x285A      	GOTO       $+0
; end of _main
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0004      [22]    _interrupt
0x001A       [7]    _____DoICP
0x0021      [12]    ___CC2DW
0x002D      [15]    _configTimer
0x003C      [11]    _configPic
0x0047      [20]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    INDF
0x0001       [1]    TMR0
0x0002       [1]    PCL
0x0003       [1]    STATUS
0x0004       [1]    FSR
0x0006       [0]    RB7_bit
0x000A       [1]    PCLATH
0x000B       [0]    T0IF_bit
0x000B       [0]    T0IE_bit
0x000B       [0]    PEIE_bit
0x000B       [0]    GIE_bit
0x0020       [2]    _contador
0x0022       [2]    ___DoICPAddr
0x0024       [1]    ___savePCLATH
0x0025       [1]    ___saveSTATUS
0x0070       [1]    R0
0x0071       [1]    R1
0x0072       [1]    R2
0x0073       [1]    R3
0x0074       [1]    R4
0x0075       [1]    R5
0x0076       [1]    R6
0x0077       [1]    R7
0x0078       [1]    R8
0x0079       [1]    R9
0x007A       [1]    R10
0x007B       [1]    R11
0x007C       [1]    R12
0x007D       [1]    R13
0x007E       [1]    R14
0x007F       [1]    R15
0x0081       [1]    OPTION_REG
0x0085       [1]    TRISA
0x0086       [1]    TRISB
0x0087       [1]    TRISC
0x0088       [1]    TRISD
