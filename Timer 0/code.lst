CCS PCM C Compiler, Version 5.097d, 1               11-dez-20 08:51
Compiler operating in Evaluation Mode
To obtain a fully enabled compiler visit www.ccsinfo.com/products

               Filename:   C:\Guilherme\Github\PIC 16f877a\Timer 0\code.lst

               ROM used:   94 words (1%)
                           Largest free fragment is 2048
               RAM used:   13 (4%) at main() level
                           13 (4%) worst case
               Stack used: 1 locations (0 in main + 1 for interrupts)
               Stack size: 7

0000:  NOP
0001:  MOVLW  00
0002:  MOVWF  0A
0003:  GOTO   041
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  BTFSS  0B.5
0018:  GOTO   01B
0019:  BTFSC  0B.2
001A:  GOTO   02C
001B:  MOVF   22,W
001C:  MOVWF  04
001D:  MOVF   23,W
001E:  MOVWF  77
001F:  MOVF   24,W
0020:  MOVWF  78
0021:  MOVF   25,W
0022:  MOVWF  79
0023:  MOVF   26,W
0024:  MOVWF  7A
0025:  MOVF   20,W
0026:  MOVWF  0A
0027:  SWAPF  21,W
0028:  MOVWF  03
0029:  SWAPF  7F,F
002A:  SWAPF  7F,W
002B:  RETFIE
002C:  BCF    0A.3
002D:  BCF    0A.4
002E:  GOTO   02F
.................... //Autor: Guilherme Lopes
.................... //Universidade Federal do Piauí
.................... 
.................... 
.................... #include <16F877A.h> 					//Importação da biblioteca							
.................... //////////// Standard Header file for the PIC16F877A device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F877A
.................... 
.................... #list
.................... 
.................... #use delay(crystal=20000000)				//Definicação do crital
....................  
.................... int contador =0;						//Inicialização do contador
.................... #INT_TIMER0								//Parâmetro para indicar que a proxima
.................... 										//função é conrrespondete a Timer0
.................... void tratar_t0(void)					//Função para tratar o timer0
.................... {
....................    clear_interrupt(INT_TIMER0);			//Limpar o bit T0IF
002F:  BCF    0B.2
....................    set_timer0(61);						//Definir o preload
0030:  MOVLW  3D
0031:  MOVWF  01
....................    contador++;							//Incrementar um valor, desse modo
0032:  INCF   27,F
....................    										//ocorreu uma rotina
....................    if(contador > 199)					//Se ocorrer 200 rotinas
0033:  MOVF   27,W
0034:  SUBLW  C7
0035:  BTFSC  03.0
0036:  GOTO   03D
....................    {
....................       contador = 0;						//Retorno para zero
0037:  CLRF   27
....................       output_toggle(PIN_B0);			//Comulto o estado do pino RB0
0038:  BSF    03.5
0039:  BCF    06.0
003A:  MOVLW  01
003B:  BCF    03.5
003C:  XORWF  06,F
....................    }
003D:  BCF    0B.2
003E:  BCF    0A.3
003F:  BCF    0A.4
0040:  GOTO   01B
.................... }
.................... 
.................... //Função principal
.................... void main()
0041:  MOVF   03,W
0042:  ANDLW  1F
0043:  MOVWF  03
0044:  CLRF   27
0045:  BSF    03.5
0046:  BSF    1F.0
0047:  BSF    1F.1
0048:  BSF    1F.2
0049:  BCF    1F.3
004A:  MOVLW  07
004B:  MOVWF  1C
004C:  BCF    03.7
.................... {
....................    setup_timer_0(RTCC_INTERNAL|RTCC_DIV_256);	//Definir o clock interno e o prescaler do timer0   
004D:  MOVF   01,W
004E:  ANDLW  C0
004F:  IORLW  07
0050:  MOVWF  01
....................    set_timer0(61);                             // Definir o preload
0051:  MOVLW  3D
0052:  BCF    03.5
0053:  MOVWF  01
....................    clear_interrupt(INT_TIMER0);					// Limpara o bit T0IF                
0054:  BCF    0B.2
....................    enable_interrupts(INT_TIMER0);       		// Habilitar as interrupções pelo timer0       
0055:  BSF    0B.5
....................    enable_interrupts(GLOBAL);                   // Habilitar o bit GIE de interrupção do timer0
0056:  MOVLW  C0
0057:  IORWF  0B,F
....................    output_low(PIN_B0);
0058:  BSF    03.5
0059:  BCF    06.0
005A:  BCF    03.5
005B:  BCF    06.0
....................  
....................    while(TRUE) ;                
005C:  GOTO   05C
.................... }
005D:  GOTO   05D

Configuration Fuses:
   Word  1: 373A   HS NOWDT NOPUT NOBROWNOUT NOLVP NOCPD NOWRT DEBUG NOPROTECT

   Some fuses have been forced to be compatible with the ICD debugger.
